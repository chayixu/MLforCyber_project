# -*- coding: utf-8 -*-
"""filter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vb98SvrzLTbArg8wz_XqaofGuNkF4rT6
"""

import sys
import numpy as np
import keras
import matplotlib.image as mpimg



input_image_file = sys.argv[1]
original_badnet_file =sys.argv[2]
repaired_badnet_file = sys.argv[3]




def data_loader(filepath):
    data = h5py.File(filepath, 'r')
    x_data = np.array(data['data'])
    y_data = np.array(data['label'])
    x_data = x_data.transpose((0,2,3,1))
    return x_data, y_data

def data_preprocess(x_data):
    return x_data/255

def checkInputFormat(input):
  if input.shape == (55,47,3):
    #only one image
    return np.reshape(input, (1,55,47,3))
  elif input[0].shape == (55,47,3):
    #a set of images
    return input
  else:
    print("Wrong Input Shape!!!")
    return -1

def filter(input, bad_net_path, repaired_net_path):
  BACKDOOR_LABEL = 1283
  input = checkInputFormat(input)
  model_1 = keras.models.load_model(bad_net_path)
  model_2 = keras.models.load_model(repaired_net_path)

  label_1 = np.argmax(model_1.predict(input), axis=1)
  label_2 = np.argmax(model_2.predict(input), axis=1)
  result = []
  for i in range(len(label_1)):
    if label_1[i] == label_2[i]:
      result.append(label_1[i])
    else:
      result.append(BACKDOOR_LABEL)
  return result

def main():
  if ".h5" in input_image_file:
    x,y = data_loader(input_image_file)
    x = data_preprocess(x)
  elif ".png" in input_image_file:
    x = mpimg.imread(input_image_file)
  elif ".jpeg" in input_image_file:
    x = mpimg.imread(input_image_file)
  else:
    print("Wrong input format!")
  y_filtered = filter(x, original_badnet_file, repaired_badnet_file)
  num_suspicious = 0
  for label in y_filtered:
    if label == 1283:
      num_suspicious += 1
  print("number of suspicious cases :",num_suspicious,"  out of ", len(y_filtered))
  if len(y_filtered) == 1:
    print("Predict label: ", y_filtered[0])

if __name__ == '__main__':
    main()